{"version":3,"sources":["components/Square.js","actions/PageActions.js","actions/Resultactions.js","actions/ClearActions.js","components/Board.js","containers/App.js","serviceWorker.js","reducers/actionCalc.js","index.js"],"names":["Square","this","props","setDat","value","react_default","a","createElement","className","onClick","onDatBtnClick","bind","React","Component","SET_DAT","dat","type","payload","SET_RESULT","setResult","SET_CLEAR","ClearDat","Board","i","click","components_Square","pageActions","ResultActions","ClearActions","result","readonly","renderSquare","connect","state","dispatch","bindActionCreators","Resultactions","App","components_Board","Boolean","window","location","hostname","match","initialState","getResult","p","myString","splits","split","length","parseFloat","toString","store","createStore","arguments","undefined","action","Object","objectSpread","substr","applyMiddleware","createLogger","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43400050.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n class Square extends React.Component {\r\n  onDatBtnClick() {\r\n    //console.log(this.props.value)\r\n   // if (this.props)\r\n   this.props.setDat(this.props.value);\r\n    }\r\n \r\n\r\n    render() {\r\n\r\n             //let dat={this.props.value}\r\n      return (\r\n        <button className=\"square\" onClick={this.onDatBtnClick.bind(this)}>\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n   }\r\n   export default Square","export const SET_DAT= 'SET_DAT'\r\n\r\nexport function setDat(dat) {\r\nreturn {\r\ntype:  SET_DAT, //аналогично, теперь используем константу\r\npayload: dat\r\n}\r\n}","export const SET_RESULT= 'SET_RESULT'\r\n\r\nexport  function setResult(dat) {\r\n    return {\r\n    type:  'SET_RESULT', //аналогично, теперь используем константу\r\n    payload: dat\r\n    }\r\n    }","export const SET_CLEAR= 'SET_CLEAR'\r\nexport function ClearDat(dat) {\r\n    return {\r\n    type:  SET_CLEAR, // константа\r\n    payload: dat\r\n    }\r\n    }","import React from 'react'\r\nimport Square from '../components/Square';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport * as pageActions from '../actions/PageActions'\r\nimport * as Resultactions from '../actions/Resultactions'\r\nimport * as ClearActions from '../actions/ClearActions'\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i,click) {\r\n      return <Square value={i} setDat={click} />;\r\n    }\r\n\r\n        \r\n    render() {\r\n      const status = 'Ведите первое число, действие, второе число  и нажмите =';\r\n      let  { setDat } = this.props.pageActions;\r\n      let  { setResult } = this.props.ResultActions;\r\n      let  { ClearDat } = this.props.ClearActions; \r\n\r\n      return (\r\n        <div>\r\n          <input type=\"text\" value={this.props.result} readonly></input>\r\n          <div className=\"status\">{status}</div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(1,setDat)}\r\n            {this.renderSquare(2,setDat)}\r\n            {this.renderSquare(3,setDat)}\r\n            {this.renderSquare(\"+\",setDat)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(4,setDat)}\r\n            {this.renderSquare(5,setDat)}\r\n            {this.renderSquare(6,setDat)}\r\n            {this.renderSquare(\"-\",setDat)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(7,setDat)}\r\n            {this.renderSquare(8,setDat)}\r\n            {this.renderSquare(9,setDat)}\r\n            {this.renderSquare(\"*\",setDat)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0,setDat)}\r\n            {this.renderSquare(\"<\",ClearDat)}\r\n            {this.renderSquare(\"=\",setResult)}\r\n            {this.renderSquare(\"/\",setDat)}\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function mapStateToProps(state) {\r\n    return {\r\n    result:state.result\r\n    }\r\n    }\r\n    \r\n    function mapDispatchToProps(dispatch) {\r\n    return {\r\n    pageActions: bindActionCreators(pageActions, dispatch),\r\n    ResultActions: bindActionCreators(Resultactions, dispatch),\r\n    ClearActions: bindActionCreators(ClearActions, dispatch),\r\n    }\r\n    }\r\n    \r\n  export default connect(mapStateToProps,mapDispatchToProps)(Board);","import React,{Component} from 'react'\r\nimport Board from '../components/Board'\r\n\r\nclass App extends Component {\r\n    render() {\r\n    return  <div>\r\n            <Board  />\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SET_RESULT = 'SET_RESULT'\r\nexport const SET_DAT= 'SET_DAT'\r\nexport const SET_CLEAR= 'SET_CLEAR'\r\n\r\nconst initialState = {\r\n            result:\"0\"\r\n                    };\r\n\r\nfunction getResult(p) {\r\n    let myString = p;\r\n\r\nlet splits = myString.split('+');\r\nif (splits.length>1 ){\r\n    let s=parseFloat(splits[0])+parseFloat(splits[1])\r\nreturn s.toString()\r\n}\r\n\r\nsplits = myString.split('-');\r\nif (splits.length>1 ){\r\n    let s=parseFloat(splits[0])-parseFloat(splits[1])\r\nreturn s.toString()\r\n}\r\n\r\nsplits = myString.split('*');\r\nif (splits.length>1 ){\r\n    let s=parseFloat(splits[0])*parseFloat(splits[1])\r\nreturn s.toString()\r\n}\r\n\r\nsplits = myString.split('/');\r\nif (splits.length>1 ){\r\n    let s=parseFloat(splits[0])/parseFloat(splits[1])\r\nreturn s.toString()\r\n}\r\n\r\n\r\n    //return p\r\n}\r\n\r\n    export default function Result(state = initialState, action) {\r\n     \r\n    switch (action.type) {\r\n    case SET_DAT: //\r\n    return { ...state, result:state.result+ action.payload }\r\n  \r\n        case SET_RESULT :\r\n        return {...state, result:getResult(state.result)}  \r\n\r\n        case SET_CLEAR :\r\n        return {...state, result:state.result.substr(0, state.result.length - 1)}   \r\n        \r\n\r\n    default:\r\n    return state;\r\n    }\r\n    }","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\n//import configureStore from './store/configureStore'\nimport { createStore, applyMiddleware } from 'redux'\nimport Result from './reducers/actionCalc'\n//import { ping } from './enhancers/Ping' // <!-- подключаем наш enhancer\nimport createLogger from 'redux-logger'\n\nconst initialState = {\n     result:\"\"\n        }\n    \n//const store = createStore( () => {}, {}) //WAT ;)\n\nconst store = createStore(Result,initialState,applyMiddleware(createLogger))\n\nrender(\n<Provider store={store}>\n<App />\n</Provider>,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}